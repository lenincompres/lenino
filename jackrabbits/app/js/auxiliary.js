/* -------------------------------------------------------------------------- */

/*                                   GENERAL                                  */

/* -------------------------------------------------------------------------- */



function getArgs() {

  let args = location.search.substring(1);

  if(!args) return;

  return JSON.parse('{"' + decodeURI(args).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g, '":"') + '"}');

}

/* -------------------------------------------------------------------------- */

/*                                   DRAWING                                  */

/* -------------------------------------------------------------------------- */



function dir(n) {

  if (n === 0) 0;

  return n > 0 ? 1 : -1;

}



function parsexy(inX, inY) {

  let [x, y] = [inX, inY];

  if (typeof inX !== 'number' && inX) { // an array or object with x and y was passed

    y = Math.round(inX.y ? inX.y : inX[1]);

    x = Math.round(inX.x ? inX.x : inX[0]);

  }

  return [int(x), int(y)];

}



function darken(c, factor = 1) {

  colorMode(HSL);

  c = color(c)

  c = color(hue(c), saturation(c), lightness(c) * factor);

  return c;

}



function dilute(c, factor = 1) {

  colorMode(RGB);

  c = color(c)

  c = color(red(c), green(c), blue(c), 255 * factor);

  return c;

}



function rgb(c) {

  c = color(c);

  return getHex(red(c)) + getHex(green(c)) + getHex(blue(c));

}



function getHex(v) {

  let o = parseInt(v).toString(16);

  return o.length == 1 ? "0" + o : o;

};



function mid(...arr) {

  return arr.reduce((o, v) => o + v, 0) / arr.length;

}



//* -------------------------------------------------------------------------- */

/*                                   STRINGS                                  */

/* -------------------------------------------------------------------------- */



String.prototype.capitalize = function () {

  return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();

}



/* -------------------------------------------------------------------------- */

/*                                   ARRAYS                                   */

/* -------------------------------------------------------------------------- */



Object.prototype.toArray = function () {

  return Object.keys(this).map(key => this[key]);

}

//randomSort the array

Array.prototype.sortRandom = function(){

  return this.sort(_ => random(-1,2));

}

Array.prototype.sortAscend = function(){

  return this.sort((a, b) => a - b);

}

Array.prototype.sortDescend = function(){

  return this.sort((a, b) => b - a);

}

// return the first N values

/*

Array.prototype.first = function (n) {

  return this.filter((_,i) => i < n);

}*/

// Returns an array removing duplicates

Array.prototype.uniques = function () {

  return Array.from(new Set(this));

}

// list strings in array separate by commas and with & at the end

Array.prototype.list = function(and = '&'){

  return this.join(', ').replace(/,([^,]*)$/,` ${and}$1`);

}

// Fills an array with objects generated by a function that receives the index in the array for each 

Array.prototype.populate = function (generator) {

  return this.fill().map((n, i) => generator(i));

}

// Adds two arrays or a number for each array item

Array.prototype.plus = function (arr) {

  return this.map((v, i) => v + (typeof arr === 'number' ? arr : arr[i % arr.length]))

};

// Substracts arrays or a number for each array item

Array.prototype.minus = function (arr) {

  return this.plus(typeof arr === 'number' ? -arr : arr.map(v => -v))

};

// multiplies two arrays or a number for each array item

Array.prototype.times = function (arr) {

  return this.map((v, i) => v * (typeof arr === 'number' ? arr : arr[i % arr.length]))

};

Array.prototype.isAny = function (test) {

  return this.reduce((prev, curr) => prev || test(curr), false);

}

// gets the first item to pass the test

Array.prototype.first = function (test) {

  return this.reduce((prev, curr) => !prev && test(curr) ? curr : prev, false);

}

// gets first existing value

Array.prototype.firstValue = function (test) {

  return this.reduce((prev, curr) => !prev && test(curr) ? test(curr) : prev, false);

}

//concatenate an array of arrays

Array.prototype.concat = function () {

  let output = [];

  this.forEach(arr => output.push(...arr));

  return output;

}

// gets all but values those in the array or value passed

Array.prototype.but = function (arr) {

  if(!Array.isArray(arr)) arr = [arr];

  return this.filter(v => !arr.includes(v));

}

